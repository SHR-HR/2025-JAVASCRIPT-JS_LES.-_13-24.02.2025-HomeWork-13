console.log("=== Работа в классе №13: Обработка ошибок. ===");

// ====================
// 1. Работа в классе.
// ====================



// Обрабатывать ошибки в коде важно по нескольким причинам:

// 1️⃣ Предотвращение краха программы – если ошибки не обрабатывать, 
// программа может внезапно остановиться, что приведёт к плохому пользовательскому опыту.

// 2️⃣ Улучшение отладки – правильная обработка ошибок позволяет получать полезную информацию о том,
//  что пошло не так, и быстрее находить причины ошибок.

// 3️⃣ Безопасность – несанкционированные ошибки могут привести к утечке данных или уязвимостям в системе.

// 4️⃣ Стабильность работы – приложение будет работать предсказуемо, даже если возникнут неожиданные ситуации.

// 5️⃣ Хорошая практика кодинга – грамотная обработка ошибок улучшает читаемость кода и делает его более поддерживаемым.

// На уроке по обработке ошибок в JavaScript я, изучил:

// try...catch
// finally
// throw


// Встроенные типы ошибок (SyntaxError, TypeError, ReferenceError и т. д.)


// 1️⃣ Почему важно обрабатывать ошибки?
// Улучшает пользовательский опыт (приложение не "падает" из-за одной ошибки).
// Позволяет корректно работать с исключительными ситуациями (например, сеть недоступна).
// Помогает отлавливать и логировать ошибки для исправления.


// 2️⃣ Как работает try...catch?

try {
    // Код, в котором может быть ошибка
    let result = 10 / 0;
    console.log(result);
} catch (error) {
    // Обработчик ошибки
    console.log("Ошибка:", error.message);
}


// 3️⃣ Пример с ошибкой

try {
    lalala; // Ошибка, переменная не определена
    console.log("Этот код не выполнится");
} catch (error) {
    console.log("Ошибка поймана:", error.message);
}


// 4️⃣ Добавление finally

try {
    console.log("Попытка выполнить код");
    throw new Error("Какая-то ошибка");
} catch (error) {
    console.log("Ошибка:", error.message);
} finally {
    console.log("Этот код выполнится в любом случае");
}
